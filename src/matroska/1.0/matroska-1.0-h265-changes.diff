diff -Nur '--exclude=*.diff' '--exclude=COPYING' '--exclude=README.txt' gst-plugins-good/gst/matroska/lzo.c src/matroska/1.0/lzo.c
--- gst-plugins-good/gst/matroska/lzo.c	2014-01-16 17:31:20.000000000 +0100
+++ src/matroska/1.0/lzo.c	2014-01-16 17:11:45.000000000 +0100
@@ -22,7 +22,7 @@
 #include <gst/gst.h>
 #include <stdlib.h>
 #include <string.h>
-#include "_stdint.h"
+#include <stdint.h>
 #include "lzo.h"
 
 /*! define if we may write up to 12 bytes beyond the output buffer */
diff -Nur '--exclude=*.diff' '--exclude=COPYING' '--exclude=README.txt' gst-plugins-good/gst/matroska/matroska-demux.c src/matroska/1.0/matroska-demux.c
--- gst-plugins-good/gst/matroska/matroska-demux.c	2014-01-16 17:31:20.000000000 +0100
+++ src/matroska/1.0/matroska-demux.c	2014-01-16 17:38:02.000000000 +0100
@@ -119,7 +119,7 @@
         "subpicture/x-pgs; subtitle/x-kate; " "application/x-subtitle-unknown")
     );
 
-static GstFlowReturn gst_matroska_demux_parse_id (GstMatroskaDemux * demux,
+static GstFlowReturn gst_matroska_demux_parse_id (GstMatroskaDemuxH265 * demux,
     guint32 id, guint64 length, guint needed);
 
 /* element functions */
@@ -136,7 +136,7 @@
 static gboolean gst_matroska_demux_sink_activate_mode (GstPad * sinkpad,
     GstObject * parent, GstPadMode mode, gboolean active);
 
-static gboolean gst_matroska_demux_handle_seek_event (GstMatroskaDemux * demux,
+static gboolean gst_matroska_demux_handle_seek_event (GstMatroskaDemuxH265 * demux,
     GstPad * pad, GstEvent * event);
 static gboolean gst_matroska_demux_handle_src_event (GstPad * pad,
     GstObject * parent, GstEvent * event);
@@ -170,7 +170,7 @@
 
 /* stream methods */
 static void gst_matroska_demux_reset (GstElement * element);
-static gboolean perform_seek_to_offset (GstMatroskaDemux * demux,
+static gboolean perform_seek_to_offset (GstMatroskaDemuxH265 * demux,
     gdouble rate, guint64 offset);
 
 /* gobject functions */
@@ -181,12 +181,12 @@
 
 GType gst_matroska_demux_get_type (void);
 #define parent_class gst_matroska_demux_parent_class
-G_DEFINE_TYPE (GstMatroskaDemux, gst_matroska_demux, GST_TYPE_ELEMENT);
+G_DEFINE_TYPE (GstMatroskaDemuxH265, gst_matroska_demux, GST_TYPE_ELEMENT);
 
 static void
 gst_matroska_demux_finalize (GObject * object)
 {
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (object);
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (object);
 
   if (demux->common.src) {
     g_ptr_array_free (demux->common.src, TRUE);
@@ -204,7 +204,7 @@
 }
 
 static void
-gst_matroska_demux_class_init (GstMatroskaDemuxClass * klass)
+gst_matroska_demux_class_init (GstMatroskaDemuxH265Class * klass)
 {
   GObjectClass *gobject_class = (GObjectClass *) klass;
   GstElementClass *gstelement_class = (GstElementClass *) klass;
@@ -252,7 +252,7 @@
 }
 
 static void
-gst_matroska_demux_init (GstMatroskaDemux * demux)
+gst_matroska_demux_init (GstMatroskaDemuxH265 * demux)
 {
   demux->common.sinkpad = gst_pad_new_from_static_template (&sink_templ,
       "sink");
@@ -321,7 +321,7 @@
  * Returns the aggregated GstFlowReturn.
  */
 static GstFlowReturn
-gst_matroska_demux_combine_flows (GstMatroskaDemux * demux,
+gst_matroska_demux_combine_flows (GstMatroskaDemuxH265 * demux,
     GstMatroskaTrackContext * track, GstFlowReturn ret)
 {
   guint i;
@@ -364,7 +364,7 @@
 static void
 gst_matroska_demux_reset (GstElement * element)
 {
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (element);
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (element);
   guint i;
 
   GST_DEBUG_OBJECT (demux, "Resetting state");
@@ -523,7 +523,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_demux_add_stream (GstMatroskaDemux * demux, GstEbmlRead * ebml)
+gst_matroska_demux_add_stream (GstMatroskaDemuxH265 * demux, GstEbmlRead * ebml)
 {
   GstElementClass *klass = GST_ELEMENT_GET_CLASS (demux);
   GstMatroskaTrackContext *context;
@@ -1353,7 +1353,7 @@
 }
 
 static gboolean
-gst_matroska_demux_query (GstMatroskaDemux * demux, GstPad * pad,
+gst_matroska_demux_query (GstMatroskaDemuxH265 * demux, GstPad * pad,
     GstQuery * query)
 {
   gboolean res = FALSE;
@@ -1468,7 +1468,7 @@
 gst_matroska_demux_handle_src_query (GstPad * pad, GstObject * parent,
     GstQuery * query)
 {
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (parent);
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (parent);
 
   return gst_matroska_demux_query (demux, pad, query);
 }
@@ -1477,7 +1477,7 @@
  * otherwise TRUE (whatever the outcome of event sending),
  * takes ownership of the passed event! */
 static gboolean
-gst_matroska_demux_send_event (GstMatroskaDemux * demux, GstEvent * event)
+gst_matroska_demux_send_event (GstMatroskaDemuxH265 * demux, GstEvent * event)
 {
   gboolean is_segment;
   gboolean ret = FALSE;
@@ -1537,7 +1537,7 @@
 static gboolean
 gst_matroska_demux_element_send_event (GstElement * element, GstEvent * event)
 {
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (element);
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (element);
   gboolean res;
 
   g_return_val_if_fail (event != NULL, FALSE);
@@ -1554,7 +1554,7 @@
 }
 
 static gboolean
-gst_matroska_demux_move_to_entry (GstMatroskaDemux * demux,
+gst_matroska_demux_move_to_entry (GstMatroskaDemuxH265 * demux,
     GstMatroskaIndex * entry, gboolean reset, gboolean update)
 {
   gint i;
@@ -1612,7 +1612,7 @@
 /* searches for a cluster start from @pos,
  * return GST_FLOW_OK and cluster position in @pos if found */
 static GstFlowReturn
-gst_matroska_demux_search_cluster (GstMatroskaDemux * demux, gint64 * pos)
+gst_matroska_demux_search_cluster (GstMatroskaDemuxH265 * demux, gint64 * pos)
 {
   gint64 newpos = *pos;
   gint64 orig_offset;
@@ -1742,7 +1742,7 @@
 /* bisect and scan through file for cluster starting before @time,
  * returns fake index entry with corresponding info on cluster */
 static GstMatroskaIndex *
-gst_matroska_demux_search_pos (GstMatroskaDemux * demux, GstClockTime time)
+gst_matroska_demux_search_pos (GstMatroskaDemuxH265 * demux, GstClockTime time)
 {
   GstMatroskaIndex *entry = NULL;
   GstMatroskaReadState current_state;
@@ -1925,7 +1925,7 @@
 }
 
 static gboolean
-gst_matroska_demux_handle_seek_event (GstMatroskaDemux * demux,
+gst_matroska_demux_handle_seek_event (GstMatroskaDemuxH265 * demux,
     GstPad * pad, GstEvent * event)
 {
   GstMatroskaIndex *entry = NULL;
@@ -2172,7 +2172,7 @@
  * function handle seeks to build the seek indexes first.
  */
 static gboolean
-gst_matroska_demux_handle_seek_push (GstMatroskaDemux * demux, GstPad * pad,
+gst_matroska_demux_handle_seek_push (GstMatroskaDemuxH265 * demux, GstPad * pad,
     GstEvent * event)
 {
   GstSeekFlags flags;
@@ -2255,7 +2255,7 @@
 gst_matroska_demux_handle_src_event (GstPad * pad, GstObject * parent,
     GstEvent * event)
 {
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (parent);
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (parent);
   gboolean res = TRUE;
 
   switch (GST_EVENT_TYPE (event)) {
@@ -2348,7 +2348,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_demux_seek_to_previous_keyframe (GstMatroskaDemux * demux)
+gst_matroska_demux_seek_to_previous_keyframe (GstMatroskaDemuxH265 * demux)
 {
   GstFlowReturn ret = GST_FLOW_EOS;
   gboolean done = TRUE;
@@ -2401,7 +2401,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_demux_parse_tracks (GstMatroskaDemux * demux, GstEbmlRead * ebml)
+gst_matroska_demux_parse_tracks (GstMatroskaDemuxH265 * demux, GstEbmlRead * ebml)
 {
   GstFlowReturn ret = GST_FLOW_OK;
   guint32 id;
@@ -2503,7 +2503,7 @@
  */
 
 static void
-gst_matroska_demux_sync_streams (GstMatroskaDemux * demux)
+gst_matroska_demux_sync_streams (GstMatroskaDemuxH265 * demux)
 {
   gint stream_nr;
 
@@ -2556,7 +2556,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_demux_push_hdr_buf (GstMatroskaDemux * demux,
+gst_matroska_demux_push_hdr_buf (GstMatroskaDemuxH265 * demux,
     GstMatroskaTrackContext * stream, guint8 * data, guint len)
 {
   GstFlowReturn ret, cret;
@@ -2580,7 +2580,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_demux_push_flac_codec_priv_data (GstMatroskaDemux * demux,
+gst_matroska_demux_push_flac_codec_priv_data (GstMatroskaDemuxH265 * demux,
     GstMatroskaTrackContext * stream)
 {
   GstFlowReturn ret;
@@ -2626,7 +2626,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_demux_push_speex_codec_priv_data (GstMatroskaDemux * demux,
+gst_matroska_demux_push_speex_codec_priv_data (GstMatroskaDemuxH265 * demux,
     GstMatroskaTrackContext * stream)
 {
   GstFlowReturn ret;
@@ -2658,7 +2658,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_demux_push_xiph_codec_priv_data (GstMatroskaDemux * demux,
+gst_matroska_demux_push_xiph_codec_priv_data (GstMatroskaDemuxH265 * demux,
     GstMatroskaTrackContext * stream)
 {
   GstFlowReturn ret;
@@ -2716,7 +2716,7 @@
 }
 
 static void
-gst_matroska_demux_push_dvd_clut_change_event (GstMatroskaDemux * demux,
+gst_matroska_demux_push_dvd_clut_change_event (GstMatroskaDemuxH265 * demux,
     GstMatroskaTrackContext * stream)
 {
   gchar *buf, *start;
@@ -3143,7 +3143,7 @@
 }
 
 static GstBuffer *
-gst_matroska_demux_align_buffer (GstMatroskaDemux * demux,
+gst_matroska_demux_align_buffer (GstMatroskaDemuxH265 * demux,
     GstBuffer * buffer, gsize alignment)
 {
   GstMapInfo map;
@@ -3181,7 +3181,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_demux_parse_blockgroup_or_simpleblock (GstMatroskaDemux * demux,
+gst_matroska_demux_parse_blockgroup_or_simpleblock (GstMatroskaDemuxH265 * demux,
     GstEbmlRead * ebml, guint64 cluster_time, guint64 cluster_offset,
     gboolean is_simpleblock)
 {
@@ -3809,7 +3809,7 @@
 
 /* return FALSE if block(group) should be skipped (due to a seek) */
 static inline gboolean
-gst_matroska_demux_seek_block (GstMatroskaDemux * demux)
+gst_matroska_demux_seek_block (GstMatroskaDemuxH265 * demux)
 {
   if (G_UNLIKELY (demux->seek_block)) {
     if (!(--demux->seek_block)) {
@@ -3824,7 +3824,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_demux_parse_contents_seekentry (GstMatroskaDemux * demux,
+gst_matroska_demux_parse_contents_seekentry (GstMatroskaDemuxH265 * demux,
     GstEbmlRead * ebml)
 {
   GstFlowReturn ret;
@@ -3978,7 +3978,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_demux_parse_contents (GstMatroskaDemux * demux, GstEbmlRead * ebml)
+gst_matroska_demux_parse_contents (GstMatroskaDemuxH265 * demux, GstEbmlRead * ebml)
 {
   GstFlowReturn ret = GST_FLOW_OK;
   guint32 id;
@@ -4027,7 +4027,7 @@
 #define MAX_BLOCK_SIZE (15 * 1024 * 1024)
 
 static inline GstFlowReturn
-gst_matroska_demux_check_read_size (GstMatroskaDemux * demux, guint64 bytes)
+gst_matroska_demux_check_read_size (GstMatroskaDemuxH265 * demux, guint64 bytes)
 {
   if (G_UNLIKELY (bytes > MAX_BLOCK_SIZE)) {
     /* only a few blocks are expected/allowed to be large,
@@ -4051,7 +4051,7 @@
 
 /* returns TRUE if we truely are in error state, and should give up */
 static inline gboolean
-gst_matroska_demux_check_parse_error (GstMatroskaDemux * demux)
+gst_matroska_demux_check_parse_error (GstMatroskaDemuxH265 * demux)
 {
   if (!demux->streaming && demux->next_cluster_offset > 0) {
     /* just repositioning to where next cluster should be and try from there */
@@ -4080,7 +4080,7 @@
 }
 
 static inline GstFlowReturn
-gst_matroska_demux_flush (GstMatroskaDemux * demux, guint flush)
+gst_matroska_demux_flush (GstMatroskaDemuxH265 * demux, guint flush)
 {
   GST_LOG_OBJECT (demux, "skipping %d bytes", flush);
   demux->common.offset += flush;
@@ -4103,7 +4103,7 @@
  * Returns EOS if insufficient available,
  * ERROR if too much was attempted to read. */
 static inline GstFlowReturn
-gst_matroska_demux_take (GstMatroskaDemux * demux, guint64 bytes,
+gst_matroska_demux_take (GstMatroskaDemuxH265 * demux, guint64 bytes,
     GstEbmlRead * ebml)
 {
   GstBuffer *buffer = NULL;
@@ -4141,7 +4141,7 @@
 }
 
 static void
-gst_matroska_demux_check_seekability (GstMatroskaDemux * demux)
+gst_matroska_demux_check_seekability (GstMatroskaDemuxH265 * demux)
 {
   GstQuery *query;
   gboolean seekable = FALSE;
@@ -4178,7 +4178,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_demux_find_tracks (GstMatroskaDemux * demux)
+gst_matroska_demux_find_tracks (GstMatroskaDemuxH265 * demux)
 {
   guint32 id;
   guint64 before_pos;
@@ -4234,7 +4234,7 @@
 } G_STMT_END
 
 static GstFlowReturn
-gst_matroska_demux_parse_id (GstMatroskaDemux * demux, guint32 id,
+gst_matroska_demux_parse_id (GstMatroskaDemuxH265 * demux, guint32 id,
     guint64 length, guint needed)
 {
   GstEbmlRead ebml = { 0, };
@@ -4524,7 +4524,7 @@
 static void
 gst_matroska_demux_loop (GstPad * pad)
 {
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (GST_PAD_PARENT (pad));
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (GST_PAD_PARENT (pad));
   GstFlowReturn ret;
   guint32 id;
   guint64 length;
@@ -4677,7 +4677,7 @@
  * Create and push a flushing seek event upstream
  */
 static gboolean
-perform_seek_to_offset (GstMatroskaDemux * demux, gdouble rate, guint64 offset)
+perform_seek_to_offset (GstMatroskaDemuxH265 * demux, gdouble rate, guint64 offset)
 {
   GstEvent *event;
   gboolean res = 0;
@@ -4698,7 +4698,7 @@
 static GstFlowReturn
 gst_matroska_demux_chain (GstPad * pad, GstObject * parent, GstBuffer * buffer)
 {
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (parent);
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (parent);
   guint available;
   GstFlowReturn ret = GST_FLOW_OK;
   guint needed = 0;
@@ -4747,7 +4747,7 @@
     GstEvent * event)
 {
   gboolean res = TRUE;
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (parent);
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (parent);
 
   GST_DEBUG_OBJECT (demux,
       "have event type %s: %p on sink pad", GST_EVENT_TYPE_NAME (event), event);
@@ -4853,7 +4853,7 @@
 static gboolean
 gst_matroska_demux_sink_activate (GstPad * sinkpad, GstObject * parent)
 {
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (parent);
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (parent);
   GstQuery *query;
   gboolean pull_mode = FALSE;
 
@@ -5152,6 +5152,9 @@
   } else if (!strcmp (codec_id, GST_MATROSKA_CODEC_ID_VIDEO_VP8)) {
     caps = gst_caps_new_empty_simple ("video/x-vp8");
     *codec_name = g_strdup_printf ("On2 VP8");
+  } else if (!strcmp (codec_id, GST_MATROSKA_CODEC_ID_VIDEO_MPEGH_HEVC)) {
+    caps = gst_caps_new_empty_simple ("video/x-h265");
+    *codec_name = g_strdup_printf ("HEVC");
   } else {
     GST_WARNING ("Unknown codec '%s', cannot build Caps", codec_id);
     return NULL;
@@ -5680,7 +5683,7 @@
 static void
 gst_matroska_demux_set_index (GstElement * element, GstIndex * index)
 {
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (element);
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (element);
 
   GST_OBJECT_LOCK (demux);
   if (demux->common.element_index)
@@ -5695,7 +5698,7 @@
 gst_matroska_demux_get_index (GstElement * element)
 {
   GstIndex *result = NULL;
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (element);
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (element);
 
   GST_OBJECT_LOCK (demux);
   if (demux->common.element_index)
@@ -5712,7 +5715,7 @@
 gst_matroska_demux_change_state (GstElement * element,
     GstStateChange transition)
 {
-  GstMatroskaDemux *demux = GST_MATROSKA_DEMUX (element);
+  GstMatroskaDemuxH265 *demux = GST_MATROSKA_DEMUX (element);
   GstStateChangeReturn ret = GST_STATE_CHANGE_SUCCESS;
 
   /* handle upwards state changes here */
@@ -5739,7 +5742,7 @@
 gst_matroska_demux_set_property (GObject * object,
     guint prop_id, const GValue * value, GParamSpec * pspec)
 {
-  GstMatroskaDemux *demux;
+  GstMatroskaDemuxH265 *demux;
 
   g_return_if_fail (GST_IS_MATROSKA_DEMUX (object));
   demux = GST_MATROSKA_DEMUX (object);
@@ -5760,7 +5763,7 @@
 gst_matroska_demux_get_property (GObject * object,
     guint prop_id, GValue * value, GParamSpec * pspec)
 {
-  GstMatroskaDemux *demux;
+  GstMatroskaDemuxH265 *demux;
 
   g_return_if_fail (GST_IS_MATROSKA_DEMUX (object));
   demux = GST_MATROSKA_DEMUX (object);
@@ -5788,7 +5791,7 @@
 
   /* create an elementfactory for the matroska_demux element */
   if (!gst_element_register (plugin, "matroskademux",
-          GST_RANK_PRIMARY, GST_TYPE_MATROSKA_DEMUX))
+          GST_RANK_PRIMARY + 1, GST_TYPE_MATROSKA_DEMUX))
     return FALSE;
 
   return TRUE;
diff -Nur '--exclude=*.diff' '--exclude=COPYING' '--exclude=README.txt' gst-plugins-good/gst/matroska/matroska-demux.h src/matroska/1.0/matroska-demux.h
--- gst-plugins-good/gst/matroska/matroska-demux.h	2014-01-16 17:31:20.000000000 +0100
+++ src/matroska/1.0/matroska-demux.h	2014-01-16 17:37:56.000000000 +0100
@@ -34,15 +34,15 @@
 #define GST_TYPE_MATROSKA_DEMUX \
   (gst_matroska_demux_get_type ())
 #define GST_MATROSKA_DEMUX(obj) \
-  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_MATROSKA_DEMUX, GstMatroskaDemux))
+  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_MATROSKA_DEMUX, GstMatroskaDemuxH265))
 #define GST_MATROSKA_DEMUX_CLASS(klass) \
-  (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_MATROSKA_DEMUX, GstMatroskaDemuxClass))
+  (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_MATROSKA_DEMUX, GstMatroskaDemuxH265Class))
 #define GST_IS_MATROSKA_DEMUX(obj) \
   (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_MATROSKA_DEMUX))
 #define GST_IS_MATROSKA_DEMUX_CLASS(klass) \
   (G_TYPE_CHECK_CLASS_TYPE ((klass), GST_TYPE_MATROSKA_DEMUX))
 
-typedef struct _GstMatroskaDemux {
+typedef struct _GstMatroskaDemuxH265 {
   GstElement              parent;
 
   /* < private > */
@@ -100,11 +100,11 @@
 
   /* for non-finalized files, with invalid segment duration */
   gboolean                 invalid_duration;
-} GstMatroskaDemux;
+} GstMatroskaDemuxH265;
 
-typedef struct _GstMatroskaDemuxClass {
+typedef struct _GstMatroskaDemuxH265Class {
   GstElementClass parent;
-} GstMatroskaDemuxClass;
+} GstMatroskaDemuxH265Class;
 
 gboolean gst_matroska_demux_plugin_init (GstPlugin *plugin);
 
diff -Nur '--exclude=*.diff' '--exclude=COPYING' '--exclude=README.txt' gst-plugins-good/gst/matroska/matroska-ids.h src/matroska/1.0/matroska-ids.h
--- gst-plugins-good/gst/matroska/matroska-ids.h	2014-01-16 17:31:20.000000000 +0100
+++ src/matroska/1.0/matroska-ids.h	2014-01-16 17:10:38.000000000 +0100
@@ -345,6 +345,7 @@
 #define GST_MATROSKA_CODEC_ID_VIDEO_SNOW         "V_SNOW"
 #define GST_MATROSKA_CODEC_ID_VIDEO_DIRAC        "V_DIRAC"
 #define GST_MATROSKA_CODEC_ID_VIDEO_VP8          "V_VP8"
+#define GST_MATROSKA_CODEC_ID_VIDEO_MPEGH_HEVC   "V_MPEGH/ISO/HEVC"
 
 #define GST_MATROSKA_CODEC_ID_AUDIO_MPEG1_L1       "A_MPEG/L1"
 #define GST_MATROSKA_CODEC_ID_AUDIO_MPEG1_L2       "A_MPEG/L2"
diff -Nur '--exclude=*.diff' '--exclude=COPYING' '--exclude=README.txt' gst-plugins-good/gst/matroska/matroska-parse.c src/matroska/1.0/matroska-parse.c
--- gst-plugins-good/gst/matroska/matroska-parse.c	2014-01-16 17:31:20.000000000 +0100
+++ src/matroska/1.0/matroska-parse.c	2014-01-16 17:38:55.000000000 +0100
@@ -98,7 +98,7 @@
         "video/x-matroska-3d; audio/webm; video/webm")
     );
 
-static GstFlowReturn gst_matroska_parse_parse_id (GstMatroskaParse * parse,
+static GstFlowReturn gst_matroska_parse_parse_id (GstMatroskaParseH265 * parse,
     guint32 id, guint64 length, guint needed);
 
 /* element functions */
@@ -110,7 +110,7 @@
     GstQuery * query);
 
 /* pad functions */
-static gboolean gst_matroska_parse_handle_seek_event (GstMatroskaParse * parse,
+static gboolean gst_matroska_parse_handle_seek_event (GstMatroskaParseH265 * parse,
     GstPad * pad, GstEvent * event);
 static gboolean gst_matroska_parse_handle_src_event (GstPad * pad,
     GstObject * parent, GstEvent * event);
@@ -133,17 +133,17 @@
 
 /* stream methods */
 static void gst_matroska_parse_reset (GstElement * element);
-static gboolean perform_seek_to_offset (GstMatroskaParse * parse,
+static gboolean perform_seek_to_offset (GstMatroskaParseH265 * parse,
     guint64 offset);
 
 GType gst_matroska_parse_get_type (void);
 #define parent_class gst_matroska_parse_parent_class
-G_DEFINE_TYPE (GstMatroskaParse, gst_matroska_parse, GST_TYPE_ELEMENT);
+G_DEFINE_TYPE (GstMatroskaParseH265, gst_matroska_parse, GST_TYPE_ELEMENT);
 
 static void
 gst_matroska_parse_finalize (GObject * object)
 {
-  GstMatroskaParse *parse = GST_MATROSKA_PARSE (object);
+  GstMatroskaParseH265 *parse = GST_MATROSKA_PARSE (object);
 
   if (parse->common.src) {
     g_ptr_array_free (parse->common.src, TRUE);
@@ -161,7 +161,7 @@
 }
 
 static void
-gst_matroska_parse_class_init (GstMatroskaParseClass * klass)
+gst_matroska_parse_class_init (GstMatroskaParseH265Class * klass)
 {
   GObjectClass *gobject_class = (GObjectClass *) klass;
   GstElementClass *gstelement_class = (GstElementClass *) klass;
@@ -197,7 +197,7 @@
 }
 
 static void
-gst_matroska_parse_init (GstMatroskaParse * parse)
+gst_matroska_parse_init (GstMatroskaParseH265 * parse)
 {
   parse->common.sinkpad = gst_pad_new_from_static_template (&sink_templ,
       "sink");
@@ -273,7 +273,7 @@
 static void
 gst_matroska_parse_reset (GstElement * element)
 {
-  GstMatroskaParse *parse = GST_MATROSKA_PARSE (element);
+  GstMatroskaParseH265 *parse = GST_MATROSKA_PARSE (element);
   guint i;
 
   GST_DEBUG_OBJECT (parse, "Resetting state");
@@ -386,7 +386,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_parse_add_stream (GstMatroskaParse * parse, GstEbmlRead * ebml)
+gst_matroska_parse_add_stream (GstMatroskaParseH265 * parse, GstEbmlRead * ebml)
 {
   GstMatroskaTrackContext *context;
   GstFlowReturn ret;
@@ -1077,7 +1077,7 @@
 }
 
 static gboolean
-gst_matroska_parse_query (GstMatroskaParse * parse, GstPad * pad,
+gst_matroska_parse_query (GstMatroskaParseH265 * parse, GstPad * pad,
     GstQuery * query)
 {
   gboolean res = FALSE;
@@ -1178,7 +1178,7 @@
     GstQuery * query)
 {
   gboolean ret;
-  GstMatroskaParse *parse = GST_MATROSKA_PARSE (parent);
+  GstMatroskaParseH265 *parse = GST_MATROSKA_PARSE (parent);
 
   ret = gst_matroska_parse_query (parse, pad, query);
 
@@ -1189,7 +1189,7 @@
  * otherwise TRUE (whatever the outcome of event sending),
  * takes ownership of the passed event! */
 static gboolean
-gst_matroska_parse_send_event (GstMatroskaParse * parse, GstEvent * event)
+gst_matroska_parse_send_event (GstMatroskaParseH265 * parse, GstEvent * event)
 {
   gboolean ret = FALSE;
 
@@ -1206,7 +1206,7 @@
 static gboolean
 gst_matroska_parse_element_send_event (GstElement * element, GstEvent * event)
 {
-  GstMatroskaParse *parse = GST_MATROSKA_PARSE (element);
+  GstMatroskaParseH265 *parse = GST_MATROSKA_PARSE (element);
   gboolean res;
 
   g_return_val_if_fail (event != NULL, FALSE);
@@ -1225,7 +1225,7 @@
 /* searches for a cluster start from @pos,
  * return GST_FLOW_OK and cluster position in @pos if found */
 static GstFlowReturn
-gst_matroska_parse_search_cluster (GstMatroskaParse * parse, gint64 * pos)
+gst_matroska_parse_search_cluster (GstMatroskaParseH265 * parse, gint64 * pos)
 {
   gint64 newpos = *pos;
   gint64 orig_offset;
@@ -1322,7 +1322,7 @@
 
 
 static gboolean
-gst_matroska_parse_handle_seek_event (GstMatroskaParse * parse,
+gst_matroska_parse_handle_seek_event (GstMatroskaParseH265 * parse,
     GstPad * pad, GstEvent * event)
 {
   GstMatroskaIndex *entry = NULL;
@@ -1386,7 +1386,7 @@
  * function handle seeks to build the seek indexes first.
  */
 static gboolean
-gst_matroska_parse_handle_seek_push (GstMatroskaParse * parse, GstPad * pad,
+gst_matroska_parse_handle_seek_push (GstMatroskaParseH265 * parse, GstPad * pad,
     GstEvent * event)
 {
   GstSeekFlags flags;
@@ -1469,7 +1469,7 @@
 gst_matroska_parse_handle_src_event (GstPad * pad, GstObject * parent,
     GstEvent * event)
 {
-  GstMatroskaParse *parse = GST_MATROSKA_PARSE (parent);
+  GstMatroskaParseH265 *parse = GST_MATROSKA_PARSE (parent);
   gboolean res = TRUE;
 
   switch (GST_EVENT_TYPE (event)) {
@@ -1520,7 +1520,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_parse_parse_tracks (GstMatroskaParse * parse, GstEbmlRead * ebml)
+gst_matroska_parse_parse_tracks (GstMatroskaParseH265 * parse, GstEbmlRead * ebml)
 {
   GstFlowReturn ret = GST_FLOW_OK;
   guint32 id;
@@ -1617,7 +1617,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_parse_parse_blockgroup_or_simpleblock (GstMatroskaParse * parse,
+gst_matroska_parse_parse_blockgroup_or_simpleblock (GstMatroskaParseH265 * parse,
     GstEbmlRead * ebml, guint64 cluster_time, guint64 cluster_offset,
     gboolean is_simpleblock)
 {
@@ -2155,7 +2155,7 @@
 
 /* return FALSE if block(group) should be skipped (due to a seek) */
 static inline gboolean
-gst_matroska_parse_seek_block (GstMatroskaParse * parse)
+gst_matroska_parse_seek_block (GstMatroskaParseH265 * parse)
 {
   if (G_UNLIKELY (parse->seek_block)) {
     if (!(--parse->seek_block)) {
@@ -2170,7 +2170,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_parse_parse_contents_seekentry (GstMatroskaParse * parse,
+gst_matroska_parse_parse_contents_seekentry (GstMatroskaParseH265 * parse,
     GstEbmlRead * ebml)
 {
   GstFlowReturn ret;
@@ -2286,7 +2286,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_parse_parse_contents (GstMatroskaParse * parse, GstEbmlRead * ebml)
+gst_matroska_parse_parse_contents (GstMatroskaParseH265 * parse, GstEbmlRead * ebml)
 {
   GstFlowReturn ret = GST_FLOW_OK;
   guint32 id;
@@ -2331,7 +2331,7 @@
 #define MAX_BLOCK_SIZE (15 * 1024 * 1024)
 
 static inline GstFlowReturn
-gst_matroska_parse_check_read_size (GstMatroskaParse * parse, guint64 bytes)
+gst_matroska_parse_check_read_size (GstMatroskaParseH265 * parse, guint64 bytes)
 {
   if (G_UNLIKELY (bytes > MAX_BLOCK_SIZE)) {
     /* only a few blocks are expected/allowed to be large,
@@ -2348,7 +2348,7 @@
 
 /* returns TRUE if we truely are in error state, and should give up */
 static inline gboolean
-gst_matroska_parse_check_parse_error (GstMatroskaParse * parse)
+gst_matroska_parse_check_parse_error (GstMatroskaParseH265 * parse)
 {
   gint64 pos;
 
@@ -2371,7 +2371,7 @@
  * Returns EOS if insufficient available,
  * ERROR if too much was attempted to read. */
 static inline GstFlowReturn
-gst_matroska_parse_take (GstMatroskaParse * parse, guint64 bytes,
+gst_matroska_parse_take (GstMatroskaParseH265 * parse, guint64 bytes,
     GstEbmlRead * ebml)
 {
   GstBuffer *buffer = NULL;
@@ -2399,7 +2399,7 @@
 }
 
 static void
-gst_matroska_parse_check_seekability (GstMatroskaParse * parse)
+gst_matroska_parse_check_seekability (GstMatroskaParseH265 * parse)
 {
   GstQuery *query;
   gboolean seekable = FALSE;
@@ -2437,7 +2437,7 @@
 
 #if 0
 static GstFlowReturn
-gst_matroska_parse_find_tracks (GstMatroskaParse * parse)
+gst_matroska_parse_find_tracks (GstMatroskaParseH265 * parse)
 {
   guint32 id;
   guint64 before_pos;
@@ -2494,7 +2494,7 @@
 } G_STMT_END
 
 static void
-gst_matroska_parse_accumulate_streamheader (GstMatroskaParse * parse,
+gst_matroska_parse_accumulate_streamheader (GstMatroskaParseH265 * parse,
     GstBuffer * buffer)
 {
   if (parse->pushed_headers) {
@@ -2513,7 +2513,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_parse_output (GstMatroskaParse * parse, GstBuffer * buffer,
+gst_matroska_parse_output (GstMatroskaParseH265 * parse, GstBuffer * buffer,
     gboolean keyframe)
 {
   GstFlowReturn ret = GST_FLOW_OK;
@@ -2574,7 +2574,7 @@
 }
 
 static GstFlowReturn
-gst_matroska_parse_parse_id (GstMatroskaParse * parse, guint32 id,
+gst_matroska_parse_parse_id (GstMatroskaParseH265 * parse, guint32 id,
     guint64 length, guint needed)
 {
   GstEbmlRead ebml = { 0, };
@@ -2870,7 +2870,7 @@
 static void
 gst_matroska_parse_loop (GstPad * pad)
 {
-  GstMatroskaParse *parse = GST_MATROSKA_PARSE (GST_PAD_PARENT (pad));
+  GstMatroskaParseH265 *parse = GST_MATROSKA_PARSE (GST_PAD_PARENT (pad));
   GstFlowReturn ret;
   guint32 id;
   guint64 length;
@@ -3013,7 +3013,7 @@
  * Create and push a flushing seek event upstream
  */
 static gboolean
-perform_seek_to_offset (GstMatroskaParse * parse, guint64 offset)
+perform_seek_to_offset (GstMatroskaParseH265 * parse, guint64 offset)
 {
   GstEvent *event;
   gboolean res = 0;
@@ -3034,7 +3034,7 @@
 static GstFlowReturn
 gst_matroska_parse_chain (GstPad * pad, GstObject * parent, GstBuffer * buffer)
 {
-  GstMatroskaParse *parse = GST_MATROSKA_PARSE (parent);
+  GstMatroskaParseH265 *parse = GST_MATROSKA_PARSE (parent);
   guint available;
   GstFlowReturn ret = GST_FLOW_OK;
   guint needed = 0;
@@ -3083,7 +3083,7 @@
     GstEvent * event)
 {
   gboolean res = TRUE;
-  GstMatroskaParse *parse = GST_MATROSKA_PARSE (GST_PAD_PARENT (pad));
+  GstMatroskaParseH265 *parse = GST_MATROSKA_PARSE (GST_PAD_PARENT (pad));
 
   GST_DEBUG_OBJECT (parse,
       "have event type %s: %p on sink pad", GST_EVENT_TYPE_NAME (event), event);
@@ -3169,7 +3169,7 @@
 static void
 gst_matroska_parse_set_index (GstElement * element, GstIndex * index)
 {
-  GstMatroskaParse *parse = GST_MATROSKA_PARSE (element);
+  GstMatroskaParseH265 *parse = GST_MATROSKA_PARSE (element);
 
   GST_OBJECT_LOCK (parse);
   if (parse->common.element_index)
@@ -3184,7 +3184,7 @@
 gst_matroska_parse_get_index (GstElement * element)
 {
   GstIndex *result = NULL;
-  GstMatroskaParse *parse = GST_MATROSKA_PARSE (element);
+  GstMatroskaParseH265 *parse = GST_MATROSKA_PARSE (element);
 
   GST_OBJECT_LOCK (parse);
   if (parse->common.element_index)
@@ -3201,7 +3201,7 @@
 gst_matroska_parse_change_state (GstElement * element,
     GstStateChange transition)
 {
-  GstMatroskaParse *parse = GST_MATROSKA_PARSE (element);
+  GstMatroskaParseH265 *parse = GST_MATROSKA_PARSE (element);
   GstStateChangeReturn ret = GST_STATE_CHANGE_SUCCESS;
 
   /* handle upwards state changes here */
@@ -3231,7 +3231,7 @@
 
   /* create an elementfactory for the matroska_parse element */
   if (!gst_element_register (plugin, "matroskaparse",
-          GST_RANK_NONE, GST_TYPE_MATROSKA_PARSE))
+          GST_RANK_NONE + 1, GST_TYPE_MATROSKA_PARSE))
     return FALSE;
 
   return TRUE;
diff -Nur '--exclude=*.diff' '--exclude=COPYING' '--exclude=README.txt' gst-plugins-good/gst/matroska/matroska-parse.h src/matroska/1.0/matroska-parse.h
--- gst-plugins-good/gst/matroska/matroska-parse.h	2014-01-16 17:31:20.000000000 +0100
+++ src/matroska/1.0/matroska-parse.h	2014-01-16 17:38:48.000000000 +0100
@@ -34,15 +34,15 @@
 #define GST_TYPE_MATROSKA_PARSE \
   (gst_matroska_parse_get_type ())
 #define GST_MATROSKA_PARSE(obj) \
-  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_MATROSKA_PARSE, GstMatroskaParse))
+  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_MATROSKA_PARSE, GstMatroskaParseH265))
 #define GST_MATROSKA_PARSE_CLASS(klass) \
-  (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_MATROSKA_PARSE, GstMatroskaParseClass))
+  (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_MATROSKA_PARSE, GstMatroskaParseH265Class))
 #define GST_IS_MATROSKA_PARSE(obj) \
   (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_MATROSKA_PARSE))
 #define GST_IS_MATROSKA_PARSE_CLASS(klass) \
   (G_TYPE_CHECK_CLASS_TYPE ((klass), GST_TYPE_MATROSKA_PARSE))
 
-typedef struct _GstMatroskaParse {
+typedef struct _GstMatroskaParseH265 {
   GstElement              parent;
 
   /* < private > */
@@ -93,11 +93,11 @@
   /* reverse playback */
   GArray                  *seek_index;
   gint                     seek_entry;
-} GstMatroskaParse;
+} GstMatroskaParseH265;
 
-typedef struct _GstMatroskaParseClass {
+typedef struct _GstMatroskaParseH265Class {
   GstElementClass parent;
-} GstMatroskaParseClass;
+} GstMatroskaParseH265Class;
 
 gboolean gst_matroska_parse_plugin_init (GstPlugin *plugin);
 
